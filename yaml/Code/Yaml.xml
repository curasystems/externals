<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Yaml</name>
    </assembly>
    <members>
        <member name="T:Yaml.Binary">
            <summary>
              A Yaml Boolean node
              tag:yaml.org,2002:binary
            </summary>
        </member>
        <member name="T:Yaml.Scalar">
            <summary>
              All Yaml scalars are derived from this class
            </summary>
        </member>
        <member name="T:Yaml.Node">
            <summary>
              Node in the Yaml tree
            </summary>
        </member>
        <member name="F:Yaml.Node.uri">
            <summary> The uri given by http://yaml.org/type/ </summary>
        </member>
        <member name="F:Yaml.Node.nodetype">
            <summary> Determines wich node we are talking about </summary>
        </member>
        <member name="M:Yaml.Node.#ctor(System.String,Yaml.NodeType)">
            <summary> Node Constructor </summary>
            <param name="uri"> URI of the node </param>
            <param name="nodetype"> The type of node that we want to store </param>
        </member>
        <member name="M:Yaml.Node.Parse(System.String)">
            <summary> Parse a Yaml string and return a Yaml tree </summary>
        </member>
        <member name="M:Yaml.Node.Parse(System.IO.TextReader)">
            <summary> Parse a Yaml string from a textreader and return a Yaml tree </summary>
        </member>
        <member name="M:Yaml.Node.Write">
            <summary> Return a Yaml string </summary>
        </member>
        <member name="M:Yaml.Node.FromFile(System.String)">
            <summary>
              Parse a Yaml string from a textfile and return a Yaml tree
            </summary>
        </member>
        <member name="M:Yaml.Node.ToFile(System.String)">
            <summary>
              Write a YAML tree to a file using UTF-8 encoding
            </summary>
        </member>
        <member name="M:Yaml.Node.ToFile(System.String,System.Text.Encoding)">
            <summary>
              Write a YAML tree to a file
            </summary>
        </member>
        <member name="M:Yaml.Node.Parse(Yaml.ParseStream)">
            <summary> Parse function </summary>
        </member>
        <member name="M:Yaml.Node.Parse(Yaml.ParseStream,System.Boolean)">
            <summary> Internal parse method </summary>
            <param name="parseImplicitMappings">
              Avoids ethernal loops while parsing implicit mappings. Implicit mappings are
              not rocognized by a leading character. So while trying to parse the key of
              something we think that could be a mapping, we're sure that if it is a mapping,
              the key of this implicit mapping is not a mapping itself.
            
              NOTE: Implicit mapping still belong to unstable code and require the UNSTABLE and
                    IMPLICIT_MAPPINGS preprocessor flags.
            </param>
            <param name="stream"></param>
        </member>
        <member name="M:Yaml.Node.Write(Yaml.WriteStream)">
            <summary>
              Writes a Yaml tree back to a file or stream  
            </summary>
            <remarks>
              should not be called from outside the parser. This method
              is only public from inside the Sequence and Mapping Write
              methods.
            </remarks>
            <param name="stream">Were the output data go's</param>
        </member>
        <member name="M:Yaml.Node.ToString">
            <summary>
              The ToString method here, and in all the classses
              derived from this class, is used mainly for debugging
              purpose. ToString returns a xml-like textual representation
              of the objects. It's very useful to see how a Yaml document
              has been parsed because of the disambiguous representation
              of this notation.
            </summary>
        </member>
        <member name="M:Yaml.Node.Info">
            <summary>
              Node info returns a YAML node and is also mostly used
              for debugging the parser. This could be used for
              traversing the meta-info of another YAML tree
            </summary>
        </member>
        <member name="P:Yaml.Node.URI">
            <summary>
              URI of this node, according to the YAML documentation.
            </summary>
        </member>
        <member name="P:Yaml.Node.Type">
            <summary>
              Kind of node: mapping, sequence, string, ...
            </summary>
        </member>
        <member name="M:Yaml.Scalar.#ctor(System.String,Yaml.NodeType)">
            <summary> Constructor </summary>
        </member>
        <member name="M:Yaml.Scalar.Parse(Yaml.ParseStream)">
            <summary>
              Parses a scalar
              <list type="bullet">
                <item>Integer</item>
                <item>String</item>
                <item>Boolean</item>
                <item>Null</item>
                <item>Timestamp</item>
                <item>Float</item>
                <item>Binary</item>
              </list>
            </summary>
            <remarks>
              Binary is only parsed behind an explicit !!binary tag (in Node.cs)
            </remarks>
        </member>
        <member name="M:Yaml.Scalar.Info">
            <summary> Node info </summary>
        </member>
        <member name="M:Yaml.Binary.#ctor(System.Byte[])">
            <summary> Binary constructor from byte array </summary>
            <remarks> This constructor only sets the reference, no new memory is allocated </remarks>
        </member>
        <member name="M:Yaml.Binary.#ctor(Yaml.ParseStream)">
            <summary> Parse a binary node </summary>
        </member>
        <member name="M:Yaml.Binary.Parse(Yaml.ParseStream)">
            <summary> Parses a binairy node. </summary>
            <remarks>
              This is not an efficient method. First the stream is placed
              in a string. And after that the string is converted in a byte[].
              If there is a fault in the binairy string then that will only be detected
              after reading the whole stream and after coneverting.
            </remarks>
        </member>
        <member name="M:Yaml.Binary.ToString">
            <summary> To String </summary>
            <remarks> The hexadecimal notation, 20 bytes for each line </remarks>
        </member>
        <member name="M:Yaml.Binary.Write(Yaml.WriteStream)">
            <summary>
              Write the base64 content to YAML
            </summary>
            <remarks> The lines are splitted in blocks of 20 bytes </remarks>
        </member>
        <member name="P:Yaml.Binary.Content">
            <summary> Binary content </summary>
            <remarks> There is no new memory allocated in the 'set'. </remarks>
        </member>
        <member name="T:Yaml.Boolean">
            <summary>
              Class for storing a Yaml Boolean node
              tag:yaml.org,2002:bool
            </summary>
        </member>
        <member name="M:Yaml.Boolean.#ctor(System.Boolean)">
            <summary> New boolean </summary>
        </member>
        <member name="M:Yaml.Boolean.#ctor(Yaml.ParseStream)">
            <summary> Parse boolean </summary>
        </member>
        <member name="M:Yaml.Boolean.ToString">
            <summary> To String </summary>
        </member>
        <member name="M:Yaml.Boolean.Write(Yaml.WriteStream)">
            <summary> Write to YAML </summary>
        </member>
        <member name="P:Yaml.Boolean.Content">
            <summary> Node content </summary>
        </member>
        <member name="T:Yaml.Float">
            <summary>
              Class for storing a Yaml Float node
              tag:yaml.org,2002:float
            </summary>
        </member>
        <member name="M:Yaml.Float.#ctor(System.Single)">
            <summary> New float </summary>
        </member>
        <member name="M:Yaml.Float.#ctor(Yaml.ParseStream)">
            <summary> Parse float </summary>
        </member>
        <member name="M:Yaml.Float.ParseNaN(Yaml.ParseStream)">
            <summary>
              Test for the value's nan, NaN and NAN in the stream. If
              found then it is placed inside the content.
              There is no more data excepted behind it
            </summary>
        </member>
        <member name="M:Yaml.Float.ParseInf(Yaml.ParseStream,System.Int32)">
            <summary>
              Test for the value's inf, Inf and INF in the stream. If
              found then it 'merged' with the sign and placed in the content.
              There is no more data excepted behind it.
            </summary>
        </member>
        <member name="M:Yaml.Float.ParseNumber(Yaml.ParseStream,System.Int32)">
            <summary>
              If it is not Infinity or NaN, then parse as a number
            </summary>
        </member>
        <member name="M:Yaml.Float.ParseScient(Yaml.ParseStream)">
            <summary> Parses the exponential part of the float </summary>
        </member>
        <member name="M:Yaml.Float.ToString">
            <summary> To string </summary>
        </member>
        <member name="M:Yaml.Float.Write(Yaml.WriteStream)">
            <summary> Write to a YAML node </summary>
        </member>
        <member name="P:Yaml.Float.Content">
            <summary> Content </summary>
        </member>
        <member name="T:Yaml.Integer">
            <summary>
              Class for storing a Yaml Integer node
              uri: tag:yaml.org,2002:int
            </summary>
        </member>
        <member name="M:Yaml.Integer.#ctor(System.Int64)">
            <summary> New Integer </summary>
        </member>
        <member name="M:Yaml.Integer.#ctor(Yaml.ParseStream)">
            <summary> Parse an integer </summary>
        </member>
        <member name="M:Yaml.Integer.Parse16(Yaml.ParseStream,System.Int16)">
            <summary> Hexadecimal string </summary>
        </member>
        <member name="M:Yaml.Integer.ParseBase(Yaml.ParseStream,System.UInt32,System.Int16)">
            <summary> Parses a string with a given base (maximum 10) </summary>
            <remarks>
              This is not completly correct. For base10 the first char may not be a '_'
              The other bases allow this...
            </remarks>
        </member>
        <member name="M:Yaml.Integer.Parse60(Yaml.ParseStream,System.Int16)">
            <summary> Parses a string with base 60, without sign </summary>
        </member>
        <member name="M:Yaml.Integer.OverflowTest(System.UInt64,System.Int16)">
            <summary> Test that the unsigned int fits in a signed int </summary>
            <param name="number"> Value to test </param>
            <param name="sign"> Sign of the int where it must fit in </param>
        </member>
        <member name="M:Yaml.Integer.ToString">
            <summary> To String </summary>
        </member>
        <member name="M:Yaml.Integer.Write(Yaml.WriteStream)">
            <summary> Write to YAML </summary>
        </member>
        <member name="P:Yaml.Integer.Content">
            <summary> Content </summary>
        </member>
        <member name="T:Yaml.Mapping">
            <summary>
              Yaml Mapping
            </summary>
        </member>
        <member name="M:Yaml.Mapping.#ctor">
            <summary> New empty mapping </summary>
        </member>
        <member name="M:Yaml.Mapping.#ctor(Yaml.MappingNode[])">
            <summary> New mapping from a mappingnode array </summary>
        </member>
        <member name="M:Yaml.Mapping.#ctor(Yaml.ParseStream)">
            <summary> Parse a mapping </summary>
        </member>
        <member name="M:Yaml.Mapping.AddMappingNode(Yaml.Node,Yaml.Node)">
            <summary> Add a node to this mapping </summary>
        </member>
        <member name="M:Yaml.Mapping.AddMappingNode(Yaml.MappingNode)">
            <summary> Add a node to this mapping </summary>
        </member>
        <member name="M:Yaml.Mapping.ToString">
            <summary> To String </summary>
        </member>
        <member name="M:Yaml.Mapping.Info">
            <summary> Node info </summary>
        </member>
        <member name="M:Yaml.Mapping.Write(Yaml.WriteStream)">
            <summary> Write to YAML </summary>
        </member>
        <member name="P:Yaml.Mapping.Count">
            <summary> Number of mappings </summary>
        </member>
        <member name="T:Yaml.MappingNode">
            <summary>
              Node pair (key, value) of a mapping
            </summary>
        </member>
        <member name="M:Yaml.MappingNode.#ctor(Yaml.Node,Yaml.Node)">
            <summary> Create a new mappingnode </summary>
        </member>
        <member name="M:Yaml.MappingNode.ToString">
            <summary> To String </summary>
        </member>
        <member name="P:Yaml.MappingNode.Key">
            <summary> Key property </summary>
        </member>
        <member name="P:Yaml.MappingNode.Value">
            <summary> Value property </summary>
        </member>
        <member name="T:Yaml.NodeType">
            <summary>
              Kind of node, used to determine the type of node.
            </summary>
        </member>
        <member name="F:Yaml.NodeType.Mapping">
            <summary>A Yaml mapping - collection type</summary>
        </member>
        <member name="F:Yaml.NodeType.Sequence">
            <summary>A Yaml sequence - collection type</summary>
        </member>
        <member name="F:Yaml.NodeType.Binary">
            <summary>A Yaml binary scalar </summary>
        </member>
        <member name="F:Yaml.NodeType.Boolean">
            <summary>A Yaml boolean scalar </summary>
        </member>
        <member name="F:Yaml.NodeType.Float">
            <summary>A Yaml float scalar </summary>
        </member>
        <member name="F:Yaml.NodeType.Integer">
            <summary>A Yaml integer scalar </summary>
        </member>
        <member name="F:Yaml.NodeType.Null">
            <summary>A Yaml null scalar </summary>
        </member>
        <member name="F:Yaml.NodeType.String">
            <summary>A Yaml string scalar </summary>
        </member>
        <member name="F:Yaml.NodeType.Timestamp">
            <summary>A Yaml timestamp scalar </summary>
        </member>
        <member name="T:Yaml.Null">
            <summary>
              Class for storing a Yaml Null node
              tag:yaml.org,2002:null
            </summary>
        </member>
        <member name="M:Yaml.Null.#ctor">
            <summary> Null Constructor </summary>
        </member>
        <member name="M:Yaml.Null.#ctor(Yaml.ParseStream)">
            <summary> Parse a null node </summary>
        </member>
        <member name="M:Yaml.Null.ToString">
            <summary> To String </summary>
        </member>
        <member name="M:Yaml.Null.Write(Yaml.WriteStream)">
            <summary> Write to YAML </summary>
        </member>
        <member name="P:Yaml.Null.Content">
            <summary> Content property </summary>
        </member>
        <member name="T:Yaml.ParseException">
            <summary>
              ParseException, could be thrown while parsing a YAML stream
            </summary>
        </member>
        <member name="M:Yaml.ParseException.#ctor(Yaml.ParseStream,System.String)">
            <summary> Constructor </summary>
            <param name="stream"> Stream is asked to get the line number where it goes wrong </param>
            <param name="message"> Info about the exception </param>
        </member>
        <member name="M:Yaml.ParseException.#ctor(Yaml.ParseStream,System.Exception)">
            <summary> Constructor </summary>
            <param name="stream"> Stream is asked to get the line number where it goes wrong </param>
            <param name="child"> The exception that is for example rethrowed </param>
        </member>
        <member name="P:Yaml.ParseException.LineNumber">
            <summary> The line where the error occures </summary>
        </member>
        <member name="T:Yaml.Preprocessor">
            <summary>
              The Preprocessor class
              Given a character stream, this class will
              walk through that stream.
              NOTE: Comments are not longer skipped at this level,
                    but now in the last level instead. (because of
                    problems with comments within the buffer)
              NOTE: Null characters are skipped, read nulls should
                    be escaped. \0
            </summary>
        </member>
        <member name="M:Yaml.Preprocessor.#ctor(System.IO.TextReader)">
            <summary> Constuctor </summary>
        </member>
        <member name="M:Yaml.Preprocessor.Next">
            <summary> Jump to the next character </summary>
        </member>
        <member name="M:Yaml.Preprocessor.StartLiteral">
            <summary> Start parsing literal </summary>
        </member>
        <member name="M:Yaml.Preprocessor.StopLiteral">
            <summary> Stop parsing literal </summary>
        </member>
        <member name="P:Yaml.Preprocessor.Literal">
            <summary> Literal parsing </summary>
        </member>
        <member name="P:Yaml.Preprocessor.Char">
            <summary> The current character </summary>
        </member>
        <member name="P:Yaml.Preprocessor.EOF">
            <summary> End of file/stream </summary>
        </member>
        <member name="P:Yaml.Preprocessor.CurrentLine">
            <summary> Returns the current line number </summary>
        </member>
        <member name="T:Yaml.IndentationProcessor">
            <summary>
              The indentation processor,
              This class divides the stream from the preprocessor
              in substreams, according to the current level
              of indentation.
            </summary>
        </member>
        <member name="M:Yaml.IndentationProcessor.#ctor(System.IO.TextReader)">
            <summary> Constructor </summary>
        </member>
        <member name="M:Yaml.IndentationProcessor.Indent">
            <summary>
              Request an indentation. When we meet a \n and the following
              line is more indented then the current indentationlever, then
              save this request
            </summary>
        </member>
        <member name="M:Yaml.IndentationProcessor.UnIndent">
            <summary> Cancel the last indentation </summary>
        </member>
        <member name="M:Yaml.IndentationProcessor.Next">
            <summary> Go to the next parsable char in the stream </summary>
        </member>
        <member name="P:Yaml.IndentationProcessor.Char">
            <summary> Reads the current char from the stream </summary>
        </member>
        <member name="P:Yaml.IndentationProcessor.EOF">
            <summary> End of File/Stream </summary>
        </member>
        <member name="T:Yaml.BufferStream">
            <summary>
              Third stream processor, this class adds a buffer with a maximum
              size of 1024 chars. The buffer cannot encapsulate multiple lines
              because that could do strange things while rewinding/indenting
            </summary>
        </member>
        <member name="M:Yaml.BufferStream.#ctor(System.IO.TextReader)">
            <summary> Constructor </summary>
        </member>
        <member name="M:Yaml.BufferStream.BuildLookaheadBuffer">
            <summary> Build lookahead buffer </summary>
        </member>
        <member name="M:Yaml.BufferStream.Next">
            <summary> Move to the next character in the parse stream. </summary>
        </member>
        <member name="M:Yaml.BufferStream.UsingBuffer">
            <summary> Returns true when using a buffer  </summary>
        </member>
        <member name="M:Yaml.BufferStream.NextInBuffer">
            <summary>
              Returns true when the next char will still be in the buffer
              (after calling next)
            </summary>
        </member>
        <member name="M:Yaml.BufferStream.DestroyLookaheadBuffer">
            <summary> Destroys the current lookaheadbuffer, if there is one </summary>
        </member>
        <member name="M:Yaml.BufferStream.RewindLookaheadBuffer">
            <summary> Rewind the buffer </summary>
        </member>
        <member name="P:Yaml.BufferStream.Char">
            <summary> The current character </summary>
        </member>
        <member name="P:Yaml.BufferStream.EOF">
            <summary> End of stream/file </summary>
        </member>
        <member name="P:Yaml.BufferStream.LookaheadPosition">
            <summary> Current position in the lookahead buffer </summary>
        </member>
        <member name="T:Yaml.MultiBufferStream">
            <summary> Parsestream with multilever buffer </summary>
        </member>
        <member name="M:Yaml.MultiBufferStream.#ctor(System.IO.TextReader)">
            <summary> Constructor </summary>
        </member>
        <member name="M:Yaml.MultiBufferStream.BuildLookaheadBuffer">
            <summary> Destroy the current buffer </summary>
        </member>
        <member name="M:Yaml.MultiBufferStream.DestroyLookaheadBuffer">
            <summary> Destroy the current buffer </summary>
        </member>
        <member name="M:Yaml.MultiBufferStream.RewindLookaheadBuffer">
            <summary> Rewind the current buffer </summary>
        </member>
        <member name="T:Yaml.DropTrailingNewline">
            <summary>
             This layer removes the trailing newline at the end of each (sub)stream
            </summary>
        </member>
        <member name="M:Yaml.DropTrailingNewline.#ctor(System.IO.TextReader)">
            <summary> Constructor </summary>
        </member>
        <member name="M:Yaml.DropTrailingNewline.SkipSpaces">
            <summary> Skip space characters </summary>
        </member>
        <member name="M:Yaml.DropTrailingNewline.Next">
            <summary> Move to the next character in the parse stream. </summary>
        </member>
        <member name="M:Yaml.DropTrailingNewline.Next(System.Boolean)">
            <summary> Move to the next character in the parse stream. </summary>
            <param name="dropLastNewLine"> Forget the last newline </param>
        </member>
        <member name="P:Yaml.DropTrailingNewline.Char">
            <summary> The current character </summary>
        </member>
        <member name="P:Yaml.DropTrailingNewline.EOF">
            <summary> End of File/Stream </summary>
        </member>
        <member name="T:Yaml.InlineProcessor">
            <summary>
              Stops parsing at specific characters, useful for parsing inline
              structures like (for instance):
            
              [aaa, bbb, ccc, {ddd: eee, "fff": ggg}]
            </summary>
        </member>
        <member name="M:Yaml.InlineProcessor.#ctor(System.IO.TextReader)">
            <summary> Constructor </summary>
        </member>
        <member name="M:Yaml.InlineProcessor.StopAt(System.Char[])">
            <summary> Set the characters where we should stop. </summary>
        </member>
        <member name="M:Yaml.InlineProcessor.DontStop">
            <summary> Unset the characters where we should stop. </summary>
        </member>
        <member name="M:Yaml.InlineProcessor.StartLiteral">
            <summary> Start parsing literal </summary>
        </member>
        <member name="M:Yaml.InlineProcessor.StopLiteral">
            <summary> Stop parsing literal </summary>
        </member>
        <member name="M:Yaml.InlineProcessor.Next">
            <summary> Move to the next character in the parse stream. </summary>
        </member>
        <member name="M:Yaml.InlineProcessor.Next(System.Boolean)">
            <summary> Move to the next character in the parse stream. </summary>
        </member>
        <member name="P:Yaml.InlineProcessor.StopNow">
            <summary> True when we have to stop here </summary>
        </member>
        <member name="P:Yaml.InlineProcessor.Char">
            <summary> The current character </summary>
        </member>
        <member name="P:Yaml.InlineProcessor.EOF">
            <summary> End of stream/file </summary>
        </member>
        <member name="T:Yaml.ParseStream">
            <summary>
              Drop the comments
              (This is disabled when literal parsing is enabled)
            </summary>
        </member>
        <member name="M:Yaml.ParseStream.#ctor(System.IO.TextReader)">
            <summary> Constructor </summary>
        </member>
        <member name="M:Yaml.ParseStream.Next">
            <summary>
            Goes to the next char in the stream
            </summary>
        </member>
        <member name="M:Yaml.ParseStream.Next(System.Boolean)">
            <summary> Move to the next character in the parse stream. </summary>
        </member>
        <member name="T:Yaml.LookaheadBuffer">
            <summary>
              The lookahead buffer, used by the buffer layer in the parser
            </summary>
        </member>
        <member name="M:Yaml.LookaheadBuffer.Append(System.Char)">
            <summary> Append a character to the buffer </summary>
        </member>
        <member name="M:Yaml.LookaheadBuffer.Rewind">
            <summary> Rewind the buffer </summary>
        </member>
        <member name="M:Yaml.LookaheadBuffer.Clear">
            <summary> Reset (clear) the buffer </summary>
        </member>
        <member name="M:Yaml.LookaheadBuffer.Next">
            <summary> Move to the next character </summary>
        </member>
        <member name="M:Yaml.LookaheadBuffer.ForgetThePast">
            <summary>
              Remove characters from the buffer before the current character
            </summary>
        </member>
        <member name="P:Yaml.LookaheadBuffer.Char">
            <summary> Character at the current position </summary>
        </member>
        <member name="P:Yaml.LookaheadBuffer.Position">
            <summary> The current position </summary>
        </member>
        <member name="P:Yaml.LookaheadBuffer.LastPosition">
            <summary> The last possible postition which could be set </summary>
        </member>
        <member name="P:Yaml.LookaheadBuffer.MaxPosition">
            <summary>
              The last possible position which could be set if
              the buffer where full
            </summary>
        </member>
        <member name="P:Yaml.LookaheadBuffer.Full">
            <summary> True when the buffer is full </summary>
        </member>
        <member name="P:Yaml.LookaheadBuffer.Size">
            <summary> Current buffer size </summary>
        </member>
        <member name="T:Yaml.Sequence">
            <summary>
              Represents a Yaml Sequence
            </summary>
        </member>
        <member name="M:Yaml.Sequence.#ctor">
            <summary> New, empty sequence </summary>
        </member>
        <member name="M:Yaml.Sequence.#ctor(Yaml.Node[])">
            <summary> New sequence from a node array </summary>
        </member>
        <member name="M:Yaml.Sequence.#ctor(Yaml.ParseStream)">
            <summary> Parse a sequence </summary>
        </member>
        <member name="M:Yaml.Sequence.AddNode(Yaml.Node)">
            <summary> Add a node to this sequence </summary>
        </member>
        <member name="M:Yaml.Sequence.ToString">
            <summary> Textual destription of this node </summary>
        </member>
        <member name="M:Yaml.Sequence.Info">
            <summary> Node info </summary>
        </member>
        <member name="M:Yaml.Sequence.Write(Yaml.WriteStream)">
            <summary> Write back to a stream </summary>
        </member>
        <member name="P:Yaml.Sequence.Item(System.Int32)">
            <summary> Get a node </summary>
        </member>
        <member name="P:Yaml.Sequence.Nodes">
            <summary> The node array </summary>
        </member>
        <member name="T:Yaml.String">
            <summary>
              Yaml String node
            </summary>
        </member>
        <member name="M:Yaml.String.#ctor(System.String)">
            <summary> New string constructor </summary>
        </member>
        <member name="M:Yaml.String.#ctor(Yaml.ParseStream)">
            <summary> Parse a string </summary>
        </member>
        <member name="M:Yaml.String.ParseSingleQuoted(Yaml.ParseStream)">
            <summary>
              Parses a String surrounded with single quotes
            </summary>
        </member>
        <member name="M:Yaml.String.ParseDoubleQuoted(Yaml.ParseStream)">
            <summary>
              Parses a String surrounded with double quotes
            </summary>
        </member>
        <member name="M:Yaml.String.ParseUnQuoted(Yaml.ParseStream)">
            <summary>
              Parses a String surrounded without nothing
            </summary>
        </member>
        <member name="M:Yaml.String.NextUnescapedChar(Yaml.ParseStream)">
            <summary>
              Reads a character from the stream, unescapes it,
              and moves to the next character.
            </summary>
        </member>
        <member name="M:Yaml.String.ToString">
            <summary> To String </summary>
        </member>
        <member name="M:Yaml.String.Write(Yaml.WriteStream)">
            <summary> Write </summary>
        </member>
        <member name="P:Yaml.String.Content">
            <summary> Content property </summary>
        </member>
        <member name="T:Yaml.Timestamp">
            <summary>
              Yaml Timestamp node
              uri: tag:yaml.org,2002:timestamp
            </summary>
        </member>
        <member name="F:Yaml.Timestamp.timezone">
            <summary>
              Represents the offset from the UTC time in hours
            </summary>
            <remarks>
              We use this extra variable for compatibility with Mono
              and .NET 1.0. .NET 2.0 has an extra property for
              System.Datetime for the timezone.
            </remarks>
        </member>
        <member name="M:Yaml.Timestamp.#ctor(System.DateTime)">
            <summary>
            Basic constructor that takes a given datetime
            </summary>
            <param name="datetime">A .NET 1.0 datetime</param>
        </member>
        <member name="M:Yaml.Timestamp.#ctor(System.DateTime,System.Double)">
            <summary>
            Basic constructor, that also gives the posibility to set a timezone
            </summary>
            <param name="datetime">A .NET 1.0 datetime</param>
            <param name="timezone">The offset, in hours,r to UTC that determine the timezone </param>
        </member>
        <member name="M:Yaml.Timestamp.ToString">
            <summary> To String </summary>
        </member>
        <member name="M:Yaml.Timestamp.#ctor(Yaml.ParseStream)">
            <summary> Parse a DateTime </summary>
        </member>
        <member name="M:Yaml.Timestamp.ParseTime(Yaml.ParseStream,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
              Parse the time (hours, minutes, seconds)
            </summary>
        </member>
        <member name="M:Yaml.Timestamp.ParseMilliSeconds(Yaml.ParseStream)">
            <summary>
              Parse the milliseconds
            </summary>
        </member>
        <member name="M:Yaml.Timestamp.ParseTimezone(Yaml.ParseStream)">
            <summary>
              Parse the time zone
            </summary>
        </member>
        <member name="M:Yaml.Timestamp.ParseNumber(Yaml.ParseStream,System.Int32)">
            <summary>
              Parse an integer
            </summary>
            <param name="length">
              The number of characters that the integer is expected to be.
            </param>
            <param name="stream"> The stream that will be parsed </param>
        </member>
        <member name="M:Yaml.Timestamp.SkipChar(Yaml.ParseStream,System.Char)">
            <summary>
              Skips a specified char, and throws an exception when
              another char was found.
            </summary>
        </member>
        <member name="M:Yaml.Timestamp.SkipWhitespace(Yaml.ParseStream)">
            <summary>
              Skips the spaces * and tabs * in the current stream
            </summary>
        </member>
        <member name="M:Yaml.Timestamp.YamlString">
            <summary> Yaml notation for this datetime </summary>
        </member>
        <member name="M:Yaml.Timestamp.Write(Yaml.WriteStream)">
            <summary> Write to YAML </summary>
        </member>
        <member name="P:Yaml.Timestamp.Content">
            <summary> Content property </summary>
        </member>
        <member name="P:Yaml.Timestamp.Timezone">
            <summary> Timezone, an offset in hours </summary>
        </member>
        <member name="T:Yaml.WriteStream">
            <summary>
              Help class for writing a Yaml tree to a string
            </summary>
        </member>
        <member name="M:Yaml.WriteStream.#ctor(System.IO.TextWriter)">
            <summary> Constructor </summary>
        </member>
        <member name="M:Yaml.WriteStream.Append(System.String)">
            <summary> Append a string </summary>
        </member>
        <member name="M:Yaml.WriteStream.Indent">
            <summary> Indentation </summary>
        </member>
        <member name="M:Yaml.WriteStream.WriteIndentation">
            <summary> Write the indentation to the output stream </summary>
        </member>
        <member name="M:Yaml.WriteStream.UnIndent">
            <summary> Unindent </summary>
        </member>
    </members>
</doc>
